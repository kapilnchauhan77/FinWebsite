<script>

    function findLocalItems(query) {
        var i, results = [];
        for (i in localStorage) {
            if (localStorage.hasOwnProperty(i)) {
                if (i.match(query) || (!query && typeof i === 'string')) {
                    value = JSON.parse(localStorage.getItem(i));
                    results.push(value);
                }
            }
        }
        return results;
    }

    function calculateTotalValsFD_display(data_of_all_fd, dates_obj, type_dates_obj){

        var unrealized_currentVal = 0;
        var realized_currentVal = 0;
        var daysGain = 0;
        var unrealized_currentVal_individual = 0;
        var realized_currentVal_individual = 0;
        var no_of_days_individual = 0;
        var invested_fyr = 0;
        var unrealized_currentVal_fyr = 0;
        var realized_currentVal_fyr = 0;
        var unrealized_invested_val = 0;
        var realized_invested_val = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_fd.forEach(function (value) {

            no_of_days_individual = parseInt((parseInt(new Date().getTime()/1000) - value.transaction_date) / (60 * 60 * 24));
            no_of_days_individual = (no_of_days_individual == 0) ? 1 : no_of_days_individual;

            if (value.payout_type == "0"){
                unrealized_currentVal_individual = (parseFloat(value.transaction_price) * Math.pow((1 +
                    parseFloat(value.transaction_interest/100) /
                    parseInt(value.interest_payout_frequency)),
    (parseInt(value.interest_payout_frequency) * ( no_of_days_individual / 365))));

                daysGain   += (unrealized_currentVal_individual - parseFloat(value.transaction_price))/no_of_days_individual;
                unrealized_currentVal += unrealized_currentVal_individual;
                unrealized_invested_val += parseFloat(value.transaction_price);
            } else{
                realized_currentVal_individual = (parseFloat(value.transaction_price) * Math.pow((1 +
                    parseFloat(value.transaction_interest/100) /
                    parseInt(value.interest_payout_frequency)),
    (parseInt(value.interest_payout_frequency) * ( no_of_days_individual / 365))));

                daysGain   += (realized_currentVal_individual - parseFloat(value.transaction_price))/no_of_days_individual;
                realized_currentVal += realized_currentVal_individual;
                realized_invested_val += parseFloat(value.transaction_price);
            }


            console.log('Date from FD:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_price);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_price);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Fixed Deposit' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Fixed Deposit'].push({'transaction_price': value.transaction_price, 'maturity_date': value.maturity_date, 'interest_rate': value.transaction_interest});
                else type_dates_obj[parseInt(value.transaction_date)]['Fixed Deposit'] = [{'transaction_price': value.transaction_price, 'maturity_date': value.maturity_date, 'interest_rate': value.transaction_interest}];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Fixed Deposit': [{'transaction_price': value.transaction_price, 'maturity_date': value.maturity_date, 'interest_rate': value.transaction_interest}]}
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                unrealized_currentVal_fyr += unrealized_currentVal_individual;
                realized_currentVal_fyr += realized_currentVal_individual;
                invested_fyr += parseFloat(value.transaction_price);
            }


        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + unrealized_currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#fd_currentValTable').text(((unrealized_currentVal) + realized_invested_val).toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = (unrealized_currentVal_fyr + realized_currentVal) - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        const daily_p_p_l = daysGain;
        $('#fd_daily_p_p_lTable').text(daily_p_p_l.toFixed(2));

        const unrealized_overall_p_p_l = (unrealized_currentVal - unrealized_invested_val);
        $('#fd_overall_p_p_lTable_unrealised').text(unrealized_overall_p_p_l.toFixed(2));

        const realized_overall_p_p_l = (realized_currentVal - realized_invested_val);
        $('#fd_overall_p_p_lTable_realised').text(realized_overall_p_p_l.toFixed(2));

        $('#total_day_gain').text((parseFloat($('#total_day_gain').text()) + daysGain).toFixed(2));
        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + unrealized_overall_p_p_l).toFixed(2));
        $('#total_realised_gain').text((parseFloat($('#total_realised_gain').text()) + realized_overall_p_p_l).toFixed(2));

        const overall_p_p_l_per_realised = (realized_invested_val == 0) ? 0 : (realized_overall_p_p_l / realized_invested_val) * 100;
        change_colors('fd_overall_p_p_lTable_realised', overall_p_p_l_per_realised);

        const overall_p_p_l_per_unrealised = (unrealized_invested_val == 0) ? 0 : (unrealized_overall_p_p_l / unrealized_invested_val) * 100;
        change_colors('fd_overall_p_p_lTable_unrealised', overall_p_p_l_per_unrealised);

        $('#fd_daily_p_p_lTable_text').removeClass('SA_text-secondary');
        $('#fd_daily_p_p_lTable_text').addClass('SA_text-success');

        return ((unrealized_currentVal) + realized_invested_val).toFixed(2);

    }

    function calculateTotalValsBullion_display(data_of_all_bullion, dates_obj, type_dates_obj){

        var currentVal = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_bullion.forEach(function (value) {

            console.log('Date from Bullion:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.net_amount);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.net_amount);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Bullion' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Bullion'].push(parseFloat(value.net_amount));
                else type_dates_obj[parseInt(value.transaction_date)]['Bullion'] = [parseFloat(value.net_amount)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Bullion': [parseFloat(value.net_amount)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                invested_fyr += parseFloat(value.net_amount);
            }

        });

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));
    }

    function calculateTotalValsCash_display(data_of_all_cash, dates_obj, type_dates_obj){

        var currentVal = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_cash.forEach(function (value) {

            currentVal += parseFloat(value.transaction_amount);

            console.log('Date from Cash:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_amount);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_amount);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Cash' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Cash'].push(parseFloat(value.transaction_amount));
                else type_dates_obj[parseInt(value.transaction_date)]['Cash'] = [parseFloat(value.transaction_amount)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Cash': [parseFloat(value.transaction_amount)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                invested_fyr += parseFloat(value.transaction_amount);
            }

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = 0;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));
    }

    function calculateTotalValsOA_display(data_of_all_oa, dates_obj, type_dates_obj){

        var currentVal = 0;
        var currentVal_fyr = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_oa.forEach(function (value) {

            currentVal += parseFloat(value.current_price);

            console.log('Date from OA:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_price);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_price);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Other Assets' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Other Assets'].push(parseFloat(value.transaction_price));
                else type_dates_obj[parseInt(value.transaction_date)]['Other Assets'] = [parseFloat(value.transaction_price)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Other Assets': [parseFloat(value.transaction_price)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                currentVal_fyr += parseFloat(value.current_price);
                invested_fyr += parseFloat(value.transaction_price);
            }

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#oa_currentValTable').text(currentVal.toFixed(2));
        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['invested_value_other_assets']; ?>);
        $('#oa_overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = currentVal_fyr - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

        const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['invested_value_other_assets']; ?>) * 100;
        change_colors('oa_overall_p_p_lTable', overall_p_p_l_per);

        return currentVal.toFixed(2);
    }

    function calculateTotalValsProperties_display(data_of_all_properties, dates_obj, type_dates_obj){

        var currentVal = 0;
        var currentVal_fyr = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_properties.forEach(function (value) {

            currentVal += parseFloat(value.current_price);

            console.log('Date from properties:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_price);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_price);

            console.log(parseFloat(value.transaction_price));
            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Properties' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Properties'].push(parseFloat(value.transaction_price));
                else type_dates_obj[parseInt(value.transaction_date)]['Properties'] = [parseFloat(value.transaction_price)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Properties': [parseFloat(value.transaction_price)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                currentVal_fyr += parseFloat(value.current_price);
                invested_fyr += parseFloat(value.transaction_price);
            }

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#properties_currentValTable').text(currentVal.toFixed(2));
        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['invested_value_properties']; ?>);
        $('#properties_overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = currentVal_fyr - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

        const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['invested_value_properties'];?>) * 100;
        change_colors('properties_overall_p_p_lTable', overall_p_p_l_per);

        return currentVal.toFixed(2);
    }

    function calculateTotalValsMF_display(data_of_all_mutual_funds, dates_obj, type_dates_obj){

        var oldVal                  = 0;
        var currentVal              = 0;
        var currentVal_fyr          = 0;
        var invested_fyr            = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        Object.keys(data_of_all_mutual_funds).forEach(function (scheme_code) {

            var total_qty_of_mf = 0;
            Object.keys(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data']).forEach(function(date_time_stamp){
                total_qty_of_mf += data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_qty'];

                console.log('Date from mf:');
                console.log(parseInt(date_time_stamp));
                if (parseInt(date_time_stamp) in dates_obj) dates_obj[parseInt(date_time_stamp)] += parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']);
                else dates_obj[parseInt(date_time_stamp)] = parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']);

                if (parseInt(date_time_stamp) in type_dates_obj){
                    if ('Mutual Funds' in type_dates_obj[parseInt(date_time_stamp)]) type_dates_obj[parseInt(date_time_stamp)]['Mutual Funds'].push(parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']));
                    else type_dates_obj[parseInt(date_time_stamp)]['Mutual Funds'] = [parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount'])];
                } else {
                    type_dates_obj[parseInt(date_time_stamp)] = {'Mutual Funds': [parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount'])]};
                }

                if (parseInt(date_time_stamp) >= financial_yr_timestamp){
                    currentVal_fyr += data_of_all_mutual_funds[scheme_code]['mf_data']['Net Asset Value'] * data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_qty'];
                    invested_fyr   += parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']);
                }
            });

            currentVal += data_of_all_mutual_funds[scheme_code]['mf_data']['Net Asset Value'] * total_qty_of_mf;
            oldVal += data_of_all_mutual_funds[scheme_code]['mf_data']['Old Net Asset Value'] * total_qty_of_mf;

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#mf_currentValTable').text(currentVal.toFixed(2));

        const daily_p_p_l = (currentVal - oldVal);
        $('#mf_daily_p_p_lTable').text(daily_p_p_l.toFixed(2));

        const daily_p_p_l_per = (daily_p_p_l / oldVal) * 100;
        change_colors('mf_daily_p_p_lTable', daily_p_p_l_per);

        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['invested_value_mutual_funds']; ?>);
        $('#mf_overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        $('#total_day_gain').text((parseFloat($('#total_day_gain').text()) + daily_p_p_l).toFixed(2));
        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

        var p_l_this_year = currentVal_fyr - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['invested_value_mutual_funds']; ?>) * 100;
        change_colors('mf_overall_p_p_lTable', overall_p_p_l_per);

        return currentVal.toFixed(2);
    }

    /* function calculateTotalValsStocks_display(data_of_all_stocks, get_fincode_data = true){ */
    function calculateTotalValsStocks_display(data_of_all_stocks, dates_obj, type_dates_obj){
        /* TODO Remove variables that are not needed */

        var adjustedValTotal        = 0;
        var intradayValTotal        = 0;
        var currentVal              = 0;
        var asset_sold_this_year    = 0;
        var asset_added_this_year   = 0;
        var currentVal_of_asset_fyr = 0;
        var fincode_added_this_fyr  = new Object();
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;
        /* var fincode_price_obj       = new Object(); */
        /* var fincode_volume          = new Object(); */
        /* var fincode_sorted_dates    = new Object(); */

        data_of_all_stocks.forEach(function (value) {
            /* console.log("Val:"); */
            /* console.log(value); */

            var total_volume_of_stock = 0;

            /* if (get_fincode_data == true) { */
            /*     var dates = new Array(); */
            /*     /1* var rolling_sum_price = 0; *1/ */

            /*     fincode_price_obj[value.stock_fincode] = new Object(); */
            /*     fincode_volume[value.stock_fincode]    = new Object(); */

            /*     value.stock_portfolio_data.forEach(val => { */
            /*         fincode_price_obj[value.stock_fincode][parseInt(val.stock_transaction_date)] = parseFloat(val.stock_transaction_qty) * parseFloat(val.stock_transaction_price); */
            /*         fincode_volume[value.stock_fincode][parseInt(val.stock_transaction_date)] = parseFloat(val.stock_transaction_qty); */
            /*         total_volume_of_stock += parseFloat(val.stock_transaction_qty); */
            /*         if (parseInt(val.stock_transaction_date) >= financial_yr_timestamp){ */
            /*             if (parseFloat(val.stock_transaction_qty) < 0) asset_sold_this_year += -1 * parseFloat(val.stock_transaction_qty) * parseFloat(val.stock_transaction_price); */
            /*             else{ */
            /*                 fincode_added_this_fyr[value.stock_fincode] = parseInt(val.stock_transaction_qty); */
            /*                 asset_added_this_year += parseFloat(val.stock_transaction_qty) * parseFloat(val.stock_transaction_price); */
            /*             } */
            /*         } */
            /*     }); */

            /*     dates = Object.keys(fincode_price_obj[value.stock_fincode]); */
            /*     dates.sort(); */

            /*     /1* TODO This is fishy, test more *1/ */
            /*     /1* dates.forEach(date_ => { *1/ */
            /*     /1*     rolling_sum_price += fincode_price_obj[value.stock_fincode][date_]; *1/ */
            /*     /1*     fincode_price_obj[value.stock_fincode][date_] = rolling_sum_price; *1/ */
            /*     /1* }); *1/ */
            /*     /1* Fishy Code *1/ */

            /*     all_dates = all_dates.concat(dates); */
            /*     fincode_sorted_dates[value.stock_fincode] = dates; */
            /* }; */

            value.stock_portfolio_data.forEach(function(val) {

                console.log('Date from stocks:');
                console.log(parseInt(val.stock_transaction_date));
                if (parseInt(val.stock_transaction_date) in dates_obj) dates_obj[parseInt(val.stock_transaction_date)] += parseFloat(val.stock_transaction_price) * parseFloat(val.stock_transaction_qty);
                else dates_obj[parseInt(val.stock_transaction_date)] = parseFloat(val.stock_transaction_price) * parseFloat(val.stock_transaction_qty);

                if (parseInt(val.stock_transaction_date) in type_dates_obj){
                    if ('Stocks' in type_dates_obj[parseInt(val.stock_transaction_date)]) type_dates_obj[parseInt(val.stock_transaction_date)]['Stocks'].push(parseFloat(val.stock_transaction_price) * parseFloat(val.stock_transaction_qty));
                    else type_dates_obj[parseInt(val.stock_transaction_date)]['Stocks'] = [parseFloat(val.stock_transaction_price) * parseFloat(val.stock_transaction_qty)];
                } else {
                    type_dates_obj[parseInt(val.stock_transaction_date)] = {'Stocks': [parseFloat(val.stock_transaction_price) * parseFloat(val.stock_transaction_qty)]};
                }

                total_volume_of_stock += parseFloat(val.stock_transaction_qty);
                if (parseInt(val.stock_transaction_date) >= financial_yr_timestamp){
                    if (parseFloat(val.stock_transaction_qty) < 0) asset_sold_this_year += -1 * parseFloat(val.stock_transaction_qty) * parseFloat(val.stock_transaction_price);
                    else{
                        fincode_added_this_fyr[value.stock_fincode] = parseInt(val.stock_transaction_qty);
                        asset_added_this_year += parseFloat(val.stock_transaction_qty) * parseFloat(val.stock_transaction_price);
                    }
                };
            });

            if (value.price_detail_intraday == null) {

                if (value.stock_fincode in fincode_added_this_fyr) currentVal_of_asset_fyr += (parseFloat(value.price_detail_adjusted.close) * fincode_added_this_fyr[value.stock_fincode]);
                currentVal       += parseFloat(value.price_detail_adjusted.close);
                adjustedValTotal += parseFloat(value.price_detail_adjusted.close);

            } else {

                if (value.stock_fincode in fincode_added_this_fyr) currentVal_of_asset_fyr += (parseFloat(value.price_detail_intraday.close) * fincode_added_this_fyr[value.stock_fincode]);
                currentVal       += parseFloat(value.price_detail_intraday.close);
                intradayValTotal += parseFloat(value.price_detail_intraday.close);
                adjustedValTotal += parseFloat(value.price_detail_adjusted.close);

            }

            currentVal       *= total_volume_of_stock;
            adjustedValTotal *= total_volume_of_stock;
            intradayValTotal *= total_volume_of_stock;

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#currentValTable').text(currentVal.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + asset_added_this_year;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = currentVal_of_asset_fyr - asset_added_this_year;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));
        $('#asset_sold_this_year').text(asset_sold_this_year);

        const daily_p_p_l = (currentVal - adjustedValTotal);
        /* $('#daily_p_p_l').text(daily_p_p_l); */
        $('#daily_p_p_lTable').text(daily_p_p_l.toFixed(2));

        const daily_p_p_l_per = ((daily_p_p_l / adjustedValTotal) * 100);
        change_colors('daily_p_p_l', daily_p_p_l_per);
        change_colors('daily_p_p_lTable', daily_p_p_l_per);

        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['stock_invested_value']; ?>);
        /* $('#overall_p_p_l').text(overall_p_p_l); */
        $('#overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

        $('#total_day_gain').text((parseFloat($('#total_day_gain').text()) + daily_p_p_l).toFixed(2));
        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

        const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['stock_invested_value']; ?>) * 100;
        /* change_colors('overall_p_p_l', overall_p_p_l_per); */
        change_colors('overall_p_p_lTable', overall_p_p_l_per);

        /* return [adjustedValTotal, intradayValTotal, currentVal, fincode_price_obj, fincode_volume, fincode_sorted_dates, all_dates]; */
        return currentVal.toFixed(2);
    }

    function averageBuyingPrice({n, total}, stock_portfolio_data) {
        if (stock_portfolio_data.stock_transaction_qty < 0) {
            return {n, total};
        }
        return {
            n:   n + parseFloat(stock_portfolio_data.stock_transaction_qty),
            total: total + (parseFloat(stock_portfolio_data.stock_transaction_price) * parseFloat(stock_portfolio_data.stock_transaction_qty)),
        };
    }

    function change_dynamic_colors(){
        if (parseFloat($('#overall_p_p_l_per').text()) > 0){
            /* $('#p_l_added_this_year_unrealised_div').removeClass('SA_border-left-secondary'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#overall_p_p_l_div').addClass('SA_border-left-success');
            $('#overall_p_p_l_text').addClass('SA_text-success');
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-success'); */
        } else if (parseFloat($('#overall_p_p_l_per').text()) < 0){
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#overall_p_p_l_div').addClass('SA_border-left-danger');
            $('#overall_p_p_l_text').addClass('SA_text-danger');
            /* $('#p_l_this_year').addClass('SA_text-danger'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-danger'); */
        }

        if (parseFloat($('#daily_p_p_l_per').text()) > 0){
            /* $('#p_l_added_this_year_unrealised_div').removeClass('SA_border-left-secondary'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#daily_p_p_l_div').addClass('SA_border-left-success');
            $('#daily_p_p_l_text').addClass('SA_text-success');
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-success'); */
        } else if (parseFloat($('#daily_p_p_l_per').text()) < 0){
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#daily_p_p_l_div').addClass('SA_border-left-danger');
            $('#daily_p_p_l_text').addClass('SA_text-danger');
            /* $('#p_l_this_year').addClass('SA_text-danger'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-danger'); */
        }

        if (parseFloat($('#p_l_this_year').text()) > 0){
            /* $('#p_l_added_this_year_unrealised_div').removeClass('SA_border-left-secondary'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#p_l_added_this_year_unrealised_div').addClass('SA_border-left-success');
            $('#p_l_added_this_year_unrealised_text').addClass('SA_text-success');
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-success'); */
        } else if (parseFloat($('#p_l_this_year').text()) < 0){
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#p_l_added_this_year_unrealised_div').addClass('SA_border-left-danger');
            $('#p_l_added_this_year_unrealised_text').addClass('SA_text-danger');
            /* $('#p_l_this_year').addClass('SA_text-danger'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-danger'); */
        }
    }

    function change_colors(tag, p_l_per){
       $('#'+ tag +'_per').text(p_l_per.toFixed(2));
       if (p_l_per > 0){
           $('#'+ tag +'_div').removeClass('SA_border-left-danger');
           $('#'+ tag +'_div').removeClass('SA_border-left-secondary');
           $('#'+ tag +'_text').removeClass('SA_text-danger');
           $('#'+ tag +'_text').removeClass('SA_text-secondary');

           $('#'+ tag +'_text').addClass('SA_text-success');
           $('#'+ tag +'_div').addClass('SA_border-left-success');
       } else if(p_l_per == 0) {
           $('#'+ tag +'_div').removeClass('SA_border-left-success');
           $('#'+ tag +'_div').removeClass('SA_border-left-danger');
           $('#'+ tag +'_text').removeClass('SA_text-danger');
           $('#'+ tag +'_text').removeClass('SA_text-success');

           $('#'+ tag +'_text').addClass('SA_text-secondary');
           $('#'+ tag +'_div').addClass('SA_border-left-secondary');
           $('#'+ tag +'_progress').addClass('SA_bg-secondary');
       } else {
           $('#'+ tag +'_div').removeClass('SA_border-left-success');
           $('#'+ tag +'_div').removeClass('SA_border-left-secondary');
           $('#'+ tag +'_text').removeClass('SA_text-success');
           $('#'+ tag +'_text').removeClass('SA_text-secondary');

           $('#'+ tag +'_text').addClass('SA_text-danger');
           $('#'+ tag +'_div').addClass('SA_border-left-danger');
       }
    }


    function change_upper_values(data){

       const initialVals       = {n: 0, total: 0};
       const stock_portfolio_data_average_length = data.stock_portfolio_data.reduce(averageBuyingPrice, initialVals);
       console.log(stock_portfolio_data_average_length);

       const volume_in_portfolio = stock_portfolio_data_average_length.n;
       $('#volume_in_portfolio').text(volume_in_portfolio);

       const total_buying_price = stock_portfolio_data_average_length.total;
       $('#total_buying_price').text(total_buying_price);

       const average_buying_price = total_buying_price/volume_in_portfolio;
       $('#average_buying_price').text(average_buying_price);

       if (data.price_detail_intraday != null){

           $('#current_stock_value').text(data.price_detail_intraday.close);

           const daily_p_l = (data.price_detail_intraday.close - data.extra_stock_data.price_detail_adjusted.close) * volume_in_portfolio;
           $('#daily_p_l').text(daily_p_l);

           const daily_p_l_per = ((data.price_detail_intraday.close - data.extra_stock_data.price_detail_adjusted.close) / data.extra_stock_data.price_detail_adjusted.close) * 100;
           change_colors('daily_p_l', daily_p_l_per);

           const overall_p_l = (data.price_detail_intraday.close * volume_in_portfolio) - total_buying_price;
           $('#overall_p_l').text(overall_p_l);

           const overall_p_l_per = (overall_p_l / (data.price_detail_intraday.close * volume_in_portfolio)) * 100;
           change_colors('overall_p_l', overall_p_l_per);

       } else{

           $('#current_stock_value').text(data.price_detail_adjusted.close);

           const daily_p_l = 0;
           $('#daily_p_l').text(daily_p_l);

           const daily_p_l_per = 0;

           change_colors('daily_p_l', daily_p_l_per);

           const overall_p_l = (data.price_detail_adjusted.close * volume_in_portfolio) - total_buying_price;
           $('#overall_p_l').text(overall_p_l);

           const overall_p_l_per = (overall_p_l / (data.price_detail_adjusted.close * volume_in_portfolio)) * 100;

           change_colors('overall_p_l', overall_p_l_per);

       }
    }

</script>
