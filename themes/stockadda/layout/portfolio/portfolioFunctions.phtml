<script>

    var fincode_date_seperation = new Object();

    function getInvestedPriceEquivalent(id, qty, selling_date_){
        var final_price  = 0;
        var final_charge = 0;
        var time_stamp_sold = new Object();

        data = fincode_date_seperation[id];
        for (date_ in data){
            if (date_ > selling_date_) return [false, false];
            if (qty < data[date_]['quantity']){
                final_charge += ((data[date_]['charge'] / data[date_]['quantity']) * qty);
                final_price += ((data[date_]['price'] + (data[date_]['charge'] / data[date_]['quantity'])) * qty);
                time_stamp_sold[date_] = qty;
                return [final_price, time_stamp_sold, (final_charge/qty)];
            }
            else{
                final_charge += data[date_]['charge'];
                final_price += ((data[date_]['price'] * data[date_]['quantity']) + data[date_]['charge']);
                qty -= data[date_]['quantity'];
                time_stamp_sold[date_] = 0;
                if (qty == 0) break;
            }
        }

        return [final_price, time_stamp_sold, (final_charge/qty)];

    }

    async function addDividend(name_, uid){
        const { value: formValues } = await Swal.fire({
            title: 'Add Divided for ' + name_,
            showCancelButton: true,
            cancelButtonColor: 'red',
            showCloseButton: true,
            width: 'auto',
            html:
               `<table class="table table-hover table-striped">
                   <thead>
                       <tr>
                           <th style="text-align: center;">Transaction Date</th>
                           <th style="text-align: center;">Dividend Amount</th>
                       </tr>
                   </thead>

                   <tbody id="table_stock_quote_search_body">
                       <tr id=`+ uid +` style="height:39px">
                         <td><input id="dividend_transaction_date" type="date" name="transaction_date"/></td>
                         <td>
                             <span class="stock_quote_transac_price_div">
                                 <input id="dividend_transaction_price" type="number" min="0" value="0.00" step="any" class="stock_quote_transac_price" name="transaction_price" style="height:39px;" onkeyup=changeValues(`+ uid +`0) onchange=changeValues(`+ uid +`0) />
                             </span>
                         </td>
                       </tr>
                       <tr>
                         <td colspan=2> <span class="small">Notes:</span> <br> <span> <textarea name="notes" id="dividend_notes" rows="1"></textarea> </span> </textarea></td>
                       </tr>
                   </tbody>
               </table>`,

            focusConfirm: false,
            preConfirm: () => {
                date_ = parseInt(new Date(document.getElementById('dividend_transaction_date').value).getTime()/1000);
                dividend_amount_ = parseFloat(document.getElementById('dividend_transaction_price').value);
                if (!date_) return 'Please Enter Date!';
                if (date_ > parseInt(new Date().getTime()/1000)) return 'You Cannot Enter Future Dates!';
                if (dividend_amount_ <= 0) return 'Invalid Dividend Amount Entered!';
                to_send = {'stock_fincode': uid, 'date': date_, 'dividend_amount': dividend_amount_, 'notes': document.getElementById("dividend_notes").value};

                $.ajax({
                    url: Wo_Ajax_Requests_File(),
                    type: 'GET',
                    dataType: 'json',
                    data: {
                        f:'portfolio_data',
                        stock_array: to_send,
                        portfolio_id: <?php echo $wo['portfolio_data']['portfolio_id']; ?>,
                        auto_add: '3',
                    },
                    success: function(data) {
                        if (data['status'] == 200){
                            Swal.fire({
                                icon: 'success',
                                title: 'Dividend Added Successfully',
                                showConfirmButton: false,
                                timer: 1250,
                                timerProgressBar: true,
                            }).then((result) => {
                                localStorage.removeItem(<?php echo $wo['portfolio_data']['portfolio_id']; ?> + "_portfolio_assets");
                                location.href = '<?php echo $wo['portfolio_data']['portfolio_url']; ?>&tab=overview&content=stocks';
                            })
                        }
                        else if (data['status'] == 401){
                            console.log(data);
                            Swal.fire({
                                icon: 'error',
                                title: data['error'],
                            })
                        }
                        else{
                            console.log(data);
                            Swal.fire({
                                icon: 'error',
                                title: data['error'],
                            })
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert("AJAX call failed: " + textStatus + ", " + errorThrown);
                    }
                });
                return false;

            }
        })
        if (formValues) Swal.fire({icon: 'error', title: formValues});
    }

    function changeValue_Selling(id){
        amount = $("#"+id + " #stock_qty").val() * $("#"+id + " #stock_transaction_price").val();
        stt_charge = amount * 0.001;
        exchange_charge = ($("#"+id + " #exchange").val()=="BSE") ? (amount * 0.0000275) : (amount * 0.0000325);
        sebi_charge = amount * 0.000001;
        stamp_duty = amount * 0.00000;
        brokerage_charge = ($("#"+id + "charge #percentage_inr").val()=="INR") ? parseFloat($("#"+id + "charge #brokerage").val()) : (amount * $("#"+id + "charge #brokerage").val()/100);
        charge = stt_charge + exchange_charge + sebi_charge + stamp_duty;
        net_amount = amount - charge - brokerage_charge;
        $("#"+id+"broker_charge_").text(brokerage_charge.toFixed(2));
        $("#"+id+"charge_").text(charge.toFixed(2));
        $("#"+id+"charge #all_charges").attr('title', ' STT Charge: '+stt_charge.toFixed(2)+'\n Exchange Charge: '+exchange_charge.toFixed(2)+'\n Sebi Charge: '+sebi_charge.toFixed(2)+'\n Stamp Duty: '+stamp_duty.toFixed(2));
        $("#"+id+"amount_").text(amount.toFixed(2));
        $("#"+id+"net_amount").text(net_amount.toFixed(2));
    }

    async function sellElement(name_, uid){
        qty_available = parseInt($('#'+ uid +'_qty').text());
        const { value: formValues } = await Swal.fire({
            title: 'Sell Stock- ' + name_ + ' (Available Qty: '+ qty_available +')',
            showCancelButton: true,
            cancelButtonColor: 'red',
            showCloseButton: true,
            width: 'auto',
            html:
               `<table class="table table-hover table-striped">

                   <thead>
                       <tr>
                           <th style="text-align: center;">Selling Date</th>
                           <th style="text-align: center;">Selling Price</th>
                           <th style="text-align: center;">Quantity</th>
                           <th style="text-align: center;">Exchange</th>
                       </tr>
                   </thead>

                   <tbody id="table_stock_quote_search_body">
                        <tr id=`+ uid +` style="height:39px">
                            <td><input id="stock_transaction_date" type="date" name="transaction_date"/></td>
                            <td>
                                <span class="stock_quote_transac_price_div">
                                    <input id="stock_transaction_price" type="number" min="0" value="0.00" step="any" class="stock_quote_transac_price" name="transaction_price" style="height:39px;" onkeyup=changeValue_Selling(`+ uid +`) onchange=changeValue_Selling(`+ uid +`) />
                                </span>
                            </td>
                            <td><input id="stock_qty" type="number" min="0" value="0" step="1" class="stock_quote_transac_price" name="quantity" style="height:39px;" onkeyup=changeValue_Selling(`+ uid +`) onchange=changeValue_Selling(`+ uid +`) /></td>
                            <td><select name='exchange' id='exchange' style="width: 6em; height: 2.75em;"><option value="BSE">BSE</option><option value="NSE">NSE</option></select></td>
                        </tr>
                        <tr id=`+ uid +`charge style="height:39px">
                            <td>Amount: <span id=`+ uid +`amount_>0</span></td>
                            <td><input style="text-decoration: none; width: 6em;cursor: default;" id="brokerage" type="number" value=0 step="any" onkeyup=changeValue_Selling(`+ uid +`) onchange=changeValue_Selling(`+ uid +`) /><select name='percentage_inr' id='percentage_inr' onchange=changeValue_Selling(`+ uid +`) ><option value="Percentage">%</option><option value="INR">â‚¹</option></select>
                            Brokerage Charge: <span id=`+ uid +`broker_charge_>0</span></td>
                            <td id='all_charges' title="Current Charges: 0">Other Charges: <span id=`+ uid +`charge_>0</span></td>
                            <td>Net Amount: <span id=`+ uid +`net_amount>0</span></td>
                        </tr>
                        <tr id=`+ uid +`stock_notes style="height:39px">
                            <td colspan="7"> <span class="small">Notes:</span> <br> <span> <textarea name="notes" id="`+ uid +`notes" rows="1"></textarea> </span> </textarea></td>
                        </tr>
                   </tbody>
               </table>`,

            focusConfirm: false,
            preConfirm: () => {
                stock_transaction_qty = parseInt(document.getElementById("stock_qty").value);
                stock_transaction_date = parseInt(new Date(document.getElementById("stock_transaction_date").value).getTime()/1000);
                stock_transaction_price = parseFloat(document.getElementById('stock_transaction_price').value);
                if (!stock_transaction_date) return "Please Enter Selling Date!";
                if (stock_transaction_date > parseInt(new Date().getTime())/1000) return "You Cannot Sell On a Future Date!";
                if (stock_transaction_price < 0) return "Stock Price Cannot Be Less Than 0!";
                if (qty_available < stock_transaction_qty) return "You Cannot Sell More Than Quantity Held";
                var [invested_equivalent, time_stamp_sold, final_charge] = getInvestedPriceEquivalent(uid, stock_transaction_qty, stock_transaction_date);
                if (invested_equivalent == false && time_stamp_sold == false) return 'You do not have enough stocks on the selling date!';

                data_to_send = {
                    stock_fincode: uid,
                    stock_transaction_date: stock_transaction_date,
                    stock_transaction_price: stock_transaction_price,
                    stock_transaction_qty: -1 * stock_transaction_qty,
                    stock_charge: parseFloat($("#" + uid + "charge_").text()) + parseFloat($("#" + uid + "broker_charge_").text()),
                    note: document.getElementById(uid + "notes").value,
                    stock_net_amount: -1 * invested_equivalent,
                    timestamp_sold: time_stamp_sold,
                    final_charge: final_charge,
                    realized_gain: (parseFloat($("#"+ uid +"net_amount").text()) - invested_equivalent),
                };
                console.log(invested_equivalent)
                console.log(time_stamp_sold)
                console.log(data_to_send)


                $.ajax({
                    url: Wo_Ajax_Requests_File(),
                    type: 'GET',
                    dataType: 'json',
                    data: {
                        f:'portfolio_data',
                        stock_array: data_to_send,
                        stocks_available: parseInt(qty_available),
                        portfolio_id: <?php echo $wo['portfolio_data']['portfolio_id']; ?>,
                        auto_add: '2',
                    },
                    success: function(data) {
                        if (data['status'] == 200){
                            Swal.fire({
                                icon: 'success',
                                title: 'Stocks Sold Successfully!',
                                showConfirmButton: false,
                                timer: 1250,
                                timerProgressBar: true,
                            }).then((result) => {
                                localStorage.removeItem(<?php echo $wo['portfolio_data']['portfolio_id']; ?> + "_portfolio_assets");
                                if ((<?php echo $wo ['portfolio_data']['no_of_stocks']; ?> - stock_transaction_qty) == 0) location.href = '<?php echo $wo['portfolio_data']['portfolio_url']; ?>';
                                else location.href = '<?php echo $wo['portfolio_data']['portfolio_url']; ?>&tab=overview&content=stocks';
                            })
                        }
                        else if (data['status'] == 401){
                            console.log(data);
                            Swal.fire({
                                icon: 'error',
                                title: data['error'],
                            })
                        }
                        else{
                            console.log(data);
                            Swal.fire({
                                icon: 'error',
                                title: data['error'],
                            })
                        }
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        alert("AJAX call failed: " + textStatus + ", " + errorThrown);
                    }
                });
                return false;
            }
        })

        if (formValues) Swal.fire({icon: 'error', title: formValues});
        /* if (formValues) Swal.fire({icon: 'error', title: JSON.stringify(formValues)}); */
    }

    function findLocalItems(query) {
        var i, results = [];
        for (i in localStorage) {
            if (localStorage.hasOwnProperty(i)) {
                if (i.match(query) || (!query && typeof i === 'string')) {
                    value = JSON.parse(localStorage.getItem(i));
                    results.push(value);
                }
            }
        }
        return results;
    };

    function calculateTotalValsFD_display(data_of_all_fd, dates_obj, type_dates_obj, tab, content){

        var unrealized_currentVal = 0;
        var realized_currentVal = 0;
        var daysGain = 0;
        var unrealized_currentVal_individual = 0;
        var realized_currentVal_individual = 0;
        var no_of_days_individual = 0;
        var invested_fyr = 0;
        var unrealized_currentVal_fyr = 0;
        var realized_currentVal_fyr = 0;
        var unrealized_invested_val = 0;
        var realized_invested_val = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_fd.forEach(function (value) {

            no_of_days_individual = parseInt((parseInt(new Date().getTime() / 1000) - value.transaction_date) / (60 * 60 * 24));
            no_of_days_individual = (no_of_days_individual == 0) ? 1 : no_of_days_individual;

            if (value.payout_type == "0"){
                unrealized_currentVal_individual = (parseFloat(value.transaction_price) * Math.pow((1 +
                    parseFloat(value.transaction_interest/100) /
                    parseInt(value.interest_payout_frequency)),
                    (parseInt(value.interest_payout_frequency) * ( no_of_days_individual / 365))));

                daysGain   += (unrealized_currentVal_individual - parseFloat(value.transaction_price))/no_of_days_individual;
                unrealized_currentVal += unrealized_currentVal_individual;
                unrealized_invested_val += parseFloat(value.transaction_price);
            } else{
                realized_currentVal_individual = (parseFloat(value.transaction_price) * Math.pow((1 +
                    parseFloat(value.transaction_interest/100) /
                    parseInt(value.interest_payout_frequency)),
                    (parseInt(value.interest_payout_frequency) * ( no_of_days_individual / 365))));

                daysGain   += (realized_currentVal_individual - parseFloat(value.transaction_price))/no_of_days_individual;
                realized_currentVal += realized_currentVal_individual;
                realized_invested_val += parseFloat(value.transaction_price);
            }


            console.log('Date from FD:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_price);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_price);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Fixed Deposit' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Fixed Deposit'].push({'transaction_price': value.transaction_price, 'maturity_date': value.maturity_date, 'interest_rate': value.transaction_interest});
                else type_dates_obj[parseInt(value.transaction_date)]['Fixed Deposit'] = [{'transaction_price': value.transaction_price, 'maturity_date': value.maturity_date, 'interest_rate': value.transaction_interest}];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Fixed Deposit': [{'transaction_price': value.transaction_price, 'maturity_date': value.maturity_date, 'interest_rate': value.transaction_interest}]}
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                unrealized_currentVal_fyr += unrealized_currentVal_individual;
                realized_currentVal_fyr += realized_currentVal_individual;
                invested_fyr += parseFloat(value.transaction_price);
            }


        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + unrealized_currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));

        const daily_p_p_l = daysGain;
        $('#daily_p_p_l').text((parseFloat($('#daily_p_p_l').text()) + daily_p_p_l).toFixed(2));

        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#fd_currentValTable').text(((unrealized_currentVal) + realized_invested_val).toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        console.log('\n\n\n');
        console.log('invested_fyr_toDisplay');
        console.log(invested_fyr_toDisplay);
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = (unrealized_currentVal_fyr + realized_currentVal) - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        $('#fd_daily_p_p_lTable').text(daily_p_p_l.toFixed(2));

        const unrealized_overall_p_p_l = (unrealized_currentVal - unrealized_invested_val);
        $('#fd_overall_p_p_lTable_unrealised').text(unrealized_overall_p_p_l.toFixed(2));

        const realized_overall_p_p_l = (realized_currentVal - realized_invested_val);
        $('#fd_overall_p_p_lTable_realised').text(realized_overall_p_p_l.toFixed(2));

        $('#total_day_gain').text((parseFloat($('#total_day_gain').text()) + daysGain).toFixed(2));
        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + unrealized_overall_p_p_l).toFixed(2));
        $('#total_realised_gain').text((parseFloat($('#total_realised_gain').text()) + realized_overall_p_p_l).toFixed(2));

        const overall_p_p_l_per_realised = (realized_invested_val == 0) ? 0 : (realized_overall_p_p_l / realized_invested_val) * 100;
        change_colors('fd_overall_p_p_lTable_realised', overall_p_p_l_per_realised);

        const overall_p_p_l_per_unrealised = (unrealized_invested_val == 0) ? 0 : (unrealized_overall_p_p_l / unrealized_invested_val) * 100;
        change_colors('fd_overall_p_p_lTable_unrealised', overall_p_p_l_per_unrealised);

        $('#fd_daily_p_p_lTable_text').removeClass('SA_text-secondary');
        $('#fd_daily_p_p_lTable_text').addClass('SA_text-success');

        return ((unrealized_currentVal) + realized_invested_val).toFixed(2);

    }

    function calculateTotalValsBullion_display(data_of_all_bullion, dates_obj, type_dates_obj){

        var currentVal = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_bullion.forEach(function (value) {

            console.log('Date from Bullion:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.net_amount);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.net_amount);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Bullion' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Bullion'].push(parseFloat(value.net_amount));
                else type_dates_obj[parseInt(value.transaction_date)]['Bullion'] = [parseFloat(value.net_amount)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Bullion': [parseFloat(value.net_amount)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                invested_fyr += parseFloat(value.net_amount);
            }

        });

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));
    }

    function calculateTotalValsCash_display(data_of_all_cash, dates_obj, type_dates_obj){

        var currentVal = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_cash.forEach(function (value) {

            currentVal += parseFloat(value.transaction_amount);

            console.log('Date from Cash:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_amount);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_amount);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Cash' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Cash'].push(parseFloat(value.transaction_amount));
                else type_dates_obj[parseInt(value.transaction_date)]['Cash'] = [parseFloat(value.transaction_amount)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Cash': [parseFloat(value.transaction_amount)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                invested_fyr += parseFloat(value.transaction_amount);
            }

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = 0;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));
    }

    function calculateTotalValsOA_display(data_of_all_oa, dates_obj, type_dates_obj){

        var currentVal = 0;
        var currentVal_fyr = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_oa.forEach(function (value) {

            currentVal += parseFloat(value.current_price);

            console.log('Date from OA:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_price);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_price);

            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Other Assets' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Other Assets'].push(parseFloat(value.transaction_price));
                else type_dates_obj[parseInt(value.transaction_date)]['Other Assets'] = [parseFloat(value.transaction_price)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Other Assets': [parseFloat(value.transaction_price)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                currentVal_fyr += parseFloat(value.current_price);
                invested_fyr += parseFloat(value.transaction_price);
            }

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#oa_currentValTable').text(currentVal.toFixed(2));

        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['invested_value_other_assets']; ?>);
        $('#overall_p_p_l').text((parseFloat($('#overall_p_p_l').text()) + overall_p_p_l).toFixed(2));
        $('#oa_overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = currentVal_fyr - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

        const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['invested_value_other_assets']; ?>) * 100;
        change_colors('oa_overall_p_p_lTable', overall_p_p_l_per);

        return currentVal.toFixed(2);
    }

    function calculateTotalValsProperties_display(data_of_all_properties, dates_obj, type_dates_obj){

        var currentVal = 0;
        var currentVal_fyr = 0;
        var invested_fyr = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        data_of_all_properties.forEach(function (value) {

            currentVal += parseFloat(value.current_price);

            console.log('Date from properties:');
            console.log(parseInt(value.transaction_date));
            if (parseInt(value.transaction_date) in dates_obj) dates_obj[parseInt(value.transaction_date)] += parseFloat(value.transaction_price);
            else dates_obj[parseInt(value.transaction_date)] = parseFloat(value.transaction_price);

            console.log(parseFloat(value.transaction_price));
            if (parseInt(value.transaction_date) in type_dates_obj){
                if ('Properties' in type_dates_obj[parseInt(value.transaction_date)]) type_dates_obj[parseInt(value.transaction_date)]['Properties'].push(parseFloat(value.transaction_price));
                else type_dates_obj[parseInt(value.transaction_date)]['Properties'] = [parseFloat(value.transaction_price)];
            } else {
                type_dates_obj[parseInt(value.transaction_date)] = {'Properties': [parseFloat(value.transaction_price)]};
            }

            if (parseInt(value.transaction_date) >= financial_yr_timestamp){
                currentVal_fyr += parseFloat(value.current_price);
                invested_fyr += parseFloat(value.transaction_price);
            }

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));
        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#properties_currentValTable').text(currentVal.toFixed(2));

        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['invested_value_properties']; ?>);
        $('#overall_p_p_l').text((parseFloat($('#overall_p_p_l').text()) + overall_p_p_l).toFixed(2));
        $('#properties_overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        var p_l_this_year = currentVal_fyr - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

        const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['invested_value_properties'];?>) * 100;
        change_colors('properties_overall_p_p_lTable', overall_p_p_l_per);

        return currentVal.toFixed(2);
    }

    function calculateTotalValsMF_display(data_of_all_mutual_funds, dates_obj, type_dates_obj, tab, content){

        var oldVal                  = 0;
        var currentVal              = 0;
        var currentVal_fyr          = 0;
        var invested_fyr            = 0;
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        Object.keys(data_of_all_mutual_funds).forEach(function (scheme_code) {

            var total_qty_of_mf = 0;
            Object.keys(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data']).forEach(function(date_time_stamp){
                total_qty_of_mf += data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_qty'];

                console.log('Date from mf:');
                console.log(parseInt(date_time_stamp));
                if (parseInt(date_time_stamp) in dates_obj) dates_obj[parseInt(date_time_stamp)] += parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']);
                else dates_obj[parseInt(date_time_stamp)] = parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']);

                if (parseInt(date_time_stamp) in type_dates_obj){
                    if ('Mutual Funds' in type_dates_obj[parseInt(date_time_stamp)]) type_dates_obj[parseInt(date_time_stamp)]['Mutual Funds'].push(parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']));
                    else type_dates_obj[parseInt(date_time_stamp)]['Mutual Funds'] = [parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount'])];
                } else {
                    type_dates_obj[parseInt(date_time_stamp)] = {'Mutual Funds': [parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount'])]};
                }

                if (parseInt(date_time_stamp) >= financial_yr_timestamp){
                    currentVal_fyr += data_of_all_mutual_funds[scheme_code]['mf_data']['Net Asset Value'] * data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_qty'];
                    invested_fyr   += parseFloat(data_of_all_mutual_funds[scheme_code]['mf_portfolio_data'][date_time_stamp]['mf_transaction_amount']);
                }
            });

            currentVal += data_of_all_mutual_funds[scheme_code]['mf_data']['Net Asset Value'] * total_qty_of_mf;
            oldVal += data_of_all_mutual_funds[scheme_code]['mf_data']['Old Net Asset Value'] * total_qty_of_mf;

        });

        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));

        const daily_p_p_l = (currentVal - oldVal);
        $('#daily_p_p_l').text((parseFloat($('#daily_p_p_l').text()) + daily_p_p_l).toFixed(2));

        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['invested_value_mutual_funds']; ?>);
        $('#overall_p_p_l').text((parseFloat($('#overall_p_p_l').text()) + overall_p_p_l).toFixed(2));

        $('#total_assets').text(currentVal_toDisplay.toFixed(2));
        $('#total_current_value').text(currentVal_toDisplay.toFixed(2));

        $('#mf_currentValTable').text(currentVal.toFixed(2));

        $('#mf_daily_p_p_lTable').text(daily_p_p_l.toFixed(2));

        const daily_p_p_l_per = (daily_p_p_l / oldVal) * 100;
        change_colors('mf_daily_p_p_lTable', daily_p_p_l_per);

        $('#mf_overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

        var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + invested_fyr;
        $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

        $('#total_day_gain').text((parseFloat($('#total_day_gain').text()) + daily_p_p_l).toFixed(2));
        $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

        var p_l_this_year = currentVal_fyr - invested_fyr;
        var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
        $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));

        const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['invested_value_mutual_funds']; ?>) * 100;
        change_colors('mf_overall_p_p_lTable', overall_p_p_l_per);

        return currentVal.toFixed(2);
    }

    function calculateTotalValsStocks_display(data_of_all_stocks, dates_obj, type_dates_obj, tab, content){
        /* TODO Remove variables that are not needed */

        var today_max                = 0;
        var today_min                = 0;
        var overall_max              = 0;
        var overall_min              = 0;
        var today_max_per            = 0;
        var today_min_per            = 0;
        var overall_max_per          = 0;
        var overall_min_per          = 0;
        var num_of_trs               = 0;
        var currentVal               = 0;
        var num_loss_days            = 0;
        var today_max_comp           = '-';
        var today_min_comp           = '-';
        var overall_max_comp         = '-';
        var overall_min_comp         = '-';
        var total_loss_days          = 0;
        var num_profit_days          = 0;
        var num_loss_overall         = 0;
        var adjustedValTotal         = 0;
        var total_profit_days        = 0;
        var num_profit_overall       = 0;
        var total_loss_overall       = 0;
        var asset_sold_this_year     = 0;
        var total_profit_overall     = 0;
        var overview_daily_p_p_l     = 0;
        var asset_added_this_year    = 0;
        var overview_overall_p_p_l   = 0;
        var currentVal_of_asset_fyr  = 0;
        var total_realised_gain      = 0;
        var total_dividend_amount    = 0;

        var loss_fincode             = new Array();
        var profit_fincode           = new Array();

        var fincode_stock_weightage_invested    = new Object();
        var fincode_sector_weightage_invested   = new Object();
        var fincode_mcap_weightage_invested     = new Object();
        var fincode_stock_weightage_current     = new Object();
        var fincode_sector_weightage_current    = new Object();
        var fincode_sector_weightage_profit     = new Object();
        var fincode_sector_weightage_profit_per = new Object();
        var fincode_mcap_weightage_current      = new Object();

        var fincode_added_this_fyr  = new Object();
        var financial_yr_timestamp  = new Date(new Date().getFullYear(), 3).getTime()/1000;

        var tmp_date = 0;
        var tmp_price = 0;
        var tmp_proper_date = '';
        var date_seperation = new Object();
        var date_compname_type = new Object();


        data_of_all_stocks.forEach(function (value) {

            total_volume_of_stock  = 0;
            total_inv_val_of_stock = 0;
            current_val_of_stock   = 0;
            adjusted_val_of_stock  = 0;
            days_held_of_stock     = [];
            if (!(value.stock_fincode in fincode_date_seperation)) fincode_date_seperation[value.stock_fincode] = {};

            value.stock_portfolio_data.forEach(function(val) {

                console.log('Date from stocks:');
                console.log(parseInt(val.stock_transaction_date));

                tmp_date = new Date(parseInt(val.stock_transaction_date) * 1000);
                tmp_price = (parseFloat(val.stock_transaction_price) * parseInt(val.stock_transaction_qty)) + parseFloat(val.Charges);
                tmp_proper_date =  (tmp_date.getMonth() + 1) +"-"+ tmp_date.getDate() +"-"+ tmp_date.getFullYear()
                if (tmp_proper_date in date_seperation) date_seperation[tmp_proper_date] += tmp_price;
                else{
                    date_seperation[tmp_proper_date] = tmp_price;
                    date_compname_type[tmp_proper_date] = Object();
                    date_compname_type[tmp_proper_date][value.compname] = [['0', tmp_price, parseInt(val.stock_transaction_qty)]];
                }

                if (!(parseInt(val.stock_transaction_date) in fincode_date_seperation[value.stock_fincode])) fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)] = {'price': parseFloat(val.stock_transaction_price), 'quantity': parseInt(val.stock_transaction_qty), 'charge': parseFloat(val.Charges)};
                else {
                    fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)]['price'] *= fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)]['quantity'];
                    fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)]['quantity'] += parseInt(val.stock_transaction_qty);
                    fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)]['price'] += (parseFloat(val.stock_transaction_price) * parseFloat(val.stock_transaction_qty));
                    fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)]['price'] /= fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)]['quantity'];
                    fincode_date_seperation[value.stock_fincode][parseInt(val.stock_transaction_date)]['charge'] += parseFloat(val.Charges);
                }

                total_inv_val_of_stock += tmp_price;
                days_held_of_stock.push(Math.round(((new Date())-(val.stock_transaction_date*1000))/(1000*60*60*24)));

                if (tab == 'overview' && content == 'stocks'){
                    overview_overall_p_p_l = (value.price_detail_intraday == null) ? ((parseFloat(value.price_detail_adjusted.close) * parseFloat(val.stock_transaction_qty)) - tmp_price) : ((parseFloat(value.price_detail_intraday.close) * val.stock_transaction_qty) - tmp_price);

                    if (overview_overall_p_p_l > 0){
                        if (profit_fincode.indexOf(parseInt(value.stock_fincode)) == -1){
                            num_profit_overall += 1;
                            profit_fincode.push(parseInt(value.stock_fincode));
                        }

                        total_profit_overall += overview_overall_p_p_l;
                    } else{

                        if (loss_fincode.indexOf(parseInt(value.stock_fincode)) == -1){
                            num_loss_overall += 1;
                            loss_fincode.push(parseInt(value.stock_fincode));
                        }

                        total_loss_overall += overview_overall_p_p_l;
                    }
                } else if (tab == 'dashboard'){
                    if (parseInt(val.stock_transaction_date) in dates_obj) dates_obj[parseInt(val.stock_transaction_date)] += tmp_price;
                    else dates_obj[parseInt(val.stock_transaction_date)] = tmp_price;

                    if (parseInt(val.stock_transaction_date) in type_dates_obj){
                        if ('Stocks' in type_dates_obj[parseInt(val.stock_transaction_date)]) type_dates_obj[parseInt(val.stock_transaction_date)]['Stocks'].push(tmp_price);
                        else type_dates_obj[parseInt(val.stock_transaction_date)]['Stocks'] = [tmp_price];
                    } else {
                        type_dates_obj[parseInt(val.stock_transaction_date)] = {'Stocks': [tmp_date]};
                    }
                }

                total_volume_of_stock += parseFloat(val.stock_transaction_qty);
                if (parseInt(val.stock_transaction_date) >= financial_yr_timestamp){
                    if (parseFloat(val.stock_transaction_qty) < 0) asset_sold_this_year += -1 * (parseFloat(val.stock_transaction_qty) * parseFloat(val.stock_transaction_price) + parseFloat(val.Charges));
                    else{
                        fincode_added_this_fyr[value.stock_fincode] = parseInt(val.stock_transaction_qty);
                        asset_added_this_year += parseFloat(val.Charges) + (parseFloat(val.stock_transaction_qty) * parseFloat(val.stock_transaction_price));
                    }
                };
            });

            if (value.price_detail_intraday == null) {

                if (value.stock_fincode in fincode_added_this_fyr) currentVal_of_asset_fyr += (parseFloat(value.price_detail_adjusted.close) * fincode_added_this_fyr[value.stock_fincode]);
                current_val_of_stock = (parseFloat(value.price_detail_adjusted.close) * total_volume_of_stock);
                adjusted_val_of_stock = (parseFloat(value.price_detail_adjusted.close) * total_volume_of_stock);
                currentVal       += current_val_of_stock;
                adjustedValTotal += adjusted_val_of_stock;

            } else {

                if (value.stock_fincode in fincode_added_this_fyr) currentVal_of_asset_fyr += (parseFloat(value.price_detail_intraday.close) * fincode_added_this_fyr[value.stock_fincode]);
                current_val_of_stock = (parseFloat(value.price_detail_intraday.close) * total_volume_of_stock);
                adjusted_val_of_stock = (parseFloat(value.price_detail_adjusted.close) * total_volume_of_stock);
                currentVal       += current_val_of_stock;
                adjustedValTotal += adjusted_val_of_stock;

                if (tab == 'overview' && content == 'stocks'){
                    overview_daily_p_p_l = parseFloat(value.price_detail_intraday.close) - parseFloat(value.price_detail_adjusted.close);
                    if (overview_daily_p_p_l > 0){
                        num_profit_days   += 1;
                        total_profit_days += (overview_daily_p_p_l * total_volume_of_stock);
                    } else{
                        num_loss_days   += 1;
                        total_loss_days += (overview_daily_p_p_l * total_volume_of_stock);
                    }
                }

            }

            if (tab == 'overview' && content == 'stocks'){
                overview_table_to_append = `<tr><th scope="row"><span style="margin: 0.75em;">` + value.compname;
                if (days_held_of_stock.length > 1){
                    overview_table_to_append += `&nbsp;(`+ days_held_of_stock.length +`)`;
                    hover_title_overview_stocks = '';
                    for (st = 0; st < days_held_of_stock.length-1; st++) hover_title_overview_stocks += days_held_of_stock[st] +', ';
                    hover_title_overview_stocks += days_held_of_stock[days_held_of_stock.length-1] +'.';
                    days_held_line = `<td style='cursor: default;' title="`+ hover_title_overview_stocks +`">Hover</td>`;
                }
                else{
                    days_held_line = `<td>`+ days_held_of_stock[0] +`</td>`;
                }

                overview_table_to_append += `</span><br>`;
                overview_table_to_append += `<span style="color:red; margin-right: 0.75em;"><span style='cursor: pointer;' onclick='buyElement("`+ value.compname +`",`+ value.stock_fincode +` )'>Add</span></span>`;
                overview_table_to_append += `<span style="color:green; margin-right: 0.75em;"><span style='cursor: pointer;' onclick='sellElement("`+ value.compname +`",`+ value.stock_fincode +` )'>Sell</span></span>`;

                overview_table_to_append += `</th>`;

                fincode_stock_weightage_invested[value.compname] = parseInt(total_inv_val_of_stock * 100) / 100;
                fincode_stock_weightage_current[value.compname] = parseInt(current_val_of_stock * 100) / 100;
                if (value.ind_name in fincode_sector_weightage_invested) fincode_sector_weightage_invested[value.ind_name] += parseInt(total_inv_val_of_stock * 100) / 100;
                else fincode_sector_weightage_invested[value.ind_name] = parseInt(total_inv_val_of_stock * 100) / 100;
                if (value.ind_name in fincode_sector_weightage_current) fincode_sector_weightage_current[value.ind_name] += parseInt(current_val_of_stock * 100) / 100;
                else fincode_sector_weightage_current[value.ind_name] = parseInt(current_val_of_stock * 100) / 100;

                if (value.category in fincode_mcap_weightage_invested) fincode_mcap_weightage_invested[value.category] += parseInt(total_inv_val_of_stock * 100) / 100;
                else fincode_mcap_weightage_invested[value.category] = parseInt(total_inv_val_of_stock * 100) / 100;
                if (value.category in fincode_mcap_weightage_current) fincode_mcap_weightage_current[value.category] += parseInt(current_val_of_stock * 100) / 100;
                else fincode_mcap_weightage_current[value.category] = parseInt(current_val_of_stock * 100) / 100;
                cmp = (value.price_detail_intraday == null) ? value.price_detail_adjusted.close : value.price_detail_intraday.close;

                _todays_profit_     = (current_val_of_stock - adjusted_val_of_stock).toFixed(2);
                _todays_profit_per_ = (100 * _todays_profit_ / adjusted_val_of_stock).toFixed(2);

                _overall_profit_     = (current_val_of_stock - total_inv_val_of_stock).toFixed(2);
                _overall_profit_per_ = (100 * _overall_profit_ / total_inv_val_of_stock).toFixed(2);
                _realized_gain_      = (parseFloat(value.realized_gain)) ? (parseFloat(value.realized_gain)) : 0;
                _dividend_amount_    = (parseFloat(value.dividend_amount)) ? parseFloat(value.dividend_amount) : 0;

                console.log('_dividend_amount_')
                console.log(_dividend_amount_)

                overview_table_to_append +=`<td>&#8377;`+ parseFloat(cmp).toFixed(2) +`</td>
                                            <td id='`+ value.stock_fincode +`_qty'>`+ total_volume_of_stock +`<br><small>&#8377;`+ (total_inv_val_of_stock / total_volume_of_stock).toFixed(2) +`</small></td>`
                                            + days_held_line +
                                            `<td>&#8377;`+ total_inv_val_of_stock.toFixed(2) +`<br><small>`+ (100 * (total_inv_val_of_stock) / <?php echo $wo['portfolio_data']['stock_invested_value']; ?>).toFixed(2) +`%</small></td>
                                            <td style='color: `+ ((_todays_profit_ > 0) ? '#39CA91' : 'red') +`;'>&#8377;`+ _todays_profit_ +`<br><small>`+ _todays_profit_per_ +`%</small></td>
                                            <td style='color: `+ ((_overall_profit_ > 0) ? '#39CA91' : 'red') +`;'>&#8377;`+ _overall_profit_ +`<br><small>`+ _overall_profit_per_ +`%</small></td>
                                            <td style='color: `+ ((_realized_gain_ > 0) ? '#39CA91' : 'red') +`;'>&#8377;`+ _realized_gain_.toFixed(2) +`</td>
                                            <td>&#8377;`+ (_dividend_amount_) +`<br><small style='cursor: pointer; color: red' onclick='addDividend("`+ value.compname +`",`+ value.stock_fincode +` )'>Add</small></td>
                                            <td style='color: `+ (((_dividend_amount_ + parseFloat(_overall_profit_) + _realized_gain_) > 0) ? '#39CA91' : 'red') +`;'>&#8377;`+ parseFloat(_dividend_amount_ + parseFloat(_overall_profit_) + _realized_gain_).toFixed(2) +`</td>
                                            <td>&#8377;`+ current_val_of_stock.toFixed(2) +`<br><small><span id='`+ num_of_trs +`_weightage_stocks'>`+ (100 * current_val_of_stock).toFixed(2) +`</span>%</small></td>
                                            <td><a href="<?php echo Wo_SeoLink('index.php?link1=go-pro');?>" data-toggle="tooltip" data-placement="bottom" title="" data-original-title="Upgrade to view XIRR">Pro</a></td>`

                overview_table_to_append += `</tr>`;
                num_of_trs += 1;

                total_realised_gain += _realized_gain_;
                total_dividend_amount += _dividend_amount_;

                _todays_profit_per_ = parseFloat(_todays_profit_per_);
                _overall_profit_per_ = parseFloat(_overall_profit_per_);

                if (today_max_per < _todays_profit_per_){
                    today_max = _todays_profit_;
                    today_max_per = _todays_profit_per_;
                    today_max_comp = value.compname;
                }
                if (today_min_per > _todays_profit_per_){
                    today_min = _todays_profit_;
                    today_min_per = _todays_profit_per_;
                    today_min_comp = value.compname;
                }

                if (overall_max_per < _overall_profit_per_){
                    overall_max = _overall_profit_;
                    overall_max_per = _overall_profit_per_;
                    overall_max_comp = value.compname;
                }
                if (overall_min_per > _overall_profit_per_){
                    overall_min = _overall_profit_;
                    overall_min_per = _overall_profit_per_;
                    overall_min_comp = value.compname;
                }

                $('#overview_stocks_table_body').append(overview_table_to_append);
            }
        });

        console.log(fincode_date_seperation)
        currentVal_toDisplay = parseFloat($('#currentVal').text()) + currentVal;
        $('#currentVal').text(currentVal_toDisplay.toFixed(2));

        const daily_p_p_l = (currentVal - adjustedValTotal);
        $('#daily_p_p_l').text((parseFloat($('#daily_p_p_l').text()) + daily_p_p_l).toFixed(2));

        const overall_p_p_l = (currentVal - <?php echo $wo['portfolio_data']['stock_invested_value']; ?>);
        $('#overall_p_p_l').text((parseFloat($('#overall_p_p_l').text()) + overall_p_p_l).toFixed(2));

        if (tab == 'dashboard'){
            $('#total_assets').text(currentVal_toDisplay.toFixed(2));
            $('#total_current_value').text(currentVal_toDisplay.toFixed(2));
            $('#currentValTable').text(currentVal.toFixed(2));

            var invested_fyr_toDisplay = parseFloat($('#asset_added_this_year').text()) + asset_added_this_year;
            $('#asset_added_this_year').text(invested_fyr_toDisplay.toFixed(2));

            var p_l_this_year = currentVal_of_asset_fyr - asset_added_this_year;
            var p_l_fyr_toDisplay = parseFloat($('#p_l_this_year').text()) + p_l_this_year;
            $('#p_l_this_year').text(p_l_fyr_toDisplay.toFixed(2));
            $('#asset_sold_this_year').text(asset_sold_this_year);

            $('#daily_p_p_lTable').text(daily_p_p_l.toFixed(2));

            const daily_p_p_l_per = ((daily_p_p_l / adjustedValTotal) * 100);
            change_colors('daily_p_p_l', daily_p_p_l_per);
            change_colors('daily_p_p_lTable', daily_p_p_l_per);

            $('#overall_p_p_lTable').text(overall_p_p_l.toFixed(2));

            $('#total_day_gain').text((parseFloat($('#total_day_gain').text()) + daily_p_p_l).toFixed(2));
            $('#total_unrealised_gain').text((parseFloat($('#total_unrealised_gain').text()) + overall_p_p_l).toFixed(2));

            const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['stock_invested_value']; ?>) * 100;
            change_colors('overall_p_p_lTable', overall_p_p_l_per);
        }else if (tab == 'overview' && content == 'stocks'){

            /* for (var ind_name in fincode_sector_weightage_current){ */
            /*     fincode_sector_weightage_profit[ind_name] = fincode_sector_weightage_current[ind_name] - fincode_sector_weightage_invested[ind_name]; */
            /*     fincode_sector_weightage_profit_per[ind_name] = parseInt(((fincode_sector_weightage_profit[ind_name]) / fincode_sector_weightage_invested[ind_name]) * 10000) / 100; */
            /* } */

            add_marketCap_Overview(fincode_mcap_weightage_invested, fincode_mcap_weightage_current);
            add_doughnutCharts_Overview(total_profit_overall, total_loss_overall, total_profit_days, total_loss_days);
            transaction_price_graph(date_seperation, date_compname_type);
            realized_gain_dividend_show();

            $('#num_gain_day').text(num_profit_days);
            $('#num_loss_day').text(num_loss_days);
            $('#gain_overall').text(total_profit_overall.toFixed(2));
            $('#loss_overall').text(total_loss_overall.toFixed(2));
            $('#num_gain_overall').text(num_profit_overall);
            $('#num_loss_overall').text(num_loss_overall);
            $('#gain_day').text(total_profit_days.toFixed(2));
            $('#loss_day').text(total_loss_days.toFixed(2));
            if (today_max_per > 0){
                $('#top_gainer_day').text(today_max_comp);
                $('#top_gainer_day_amount').text(today_max);
                $('#top_gainer_day_per').text(today_max_per);
            }
            if (today_min_per < 0){
                $('#top_loser_day').text(today_min_comp);
                $('#top_loser_day_amount').text(today_min);
                $('#top_loser_day_per').text(today_min_per);
            }
            if (overall_max_per > 0){
                $('#top_profit_overall').text(overall_max_comp);
                $('#top_profit_overall_amount').text(overall_max);
                $('#top_profit_overall_per').text(overall_max_per);
            }
            if (overall_min_per < 0){
                $('#top_loss_overall').text(overall_min_comp);
                $('#top_loss_overall_amount').text(overall_min);
                $('#top_loss_overall_per').text(overall_min_per);
            }

            for (tr_num = 0; tr_num < num_of_trs; tr_num++) $('#' + tr_num + '_weightage_stocks').text((parseFloat($('#' + tr_num + '_weightage_stocks').text()) / currentVal).toFixed(2));
            const daily_p_p_l_per = ((daily_p_p_l / adjustedValTotal) * 100);
            const overall_p_p_l_per = (overall_p_p_l / <?php echo $wo['portfolio_data']['stock_invested_value']; ?>) * 100;

            last_tr = `<tr style="background-color:grey">
                           <th scope="row"><span style="margin: 0.75em; color: white;">Total</span></th>
                           <td><span style="color: white;">-</span></td>
                           <td><span style="color: white;">`+ <?php echo $wo['portfolio_data']['no_of_stocks']; ?> +`<br><small>&#8377;`+ (<?php echo $wo['portfolio_data']['stock_invested_value']; ?> / <?php echo $wo['portfolio_data']['no_of_stocks']; ?>).toFixed(2) +`</small></span></td>
                           <td><span style="color: white;">-</span></td>
                           <td><span style="color: white;">&#8377;<?php echo round($wo['portfolio_data']['stock_invested_value'], 2); ?></span></td>
                           <td><span style="color: white;">&#8377;`+ daily_p_p_l.toFixed(2) +`<br><small>`+ (daily_p_p_l_per).toFixed(2) +`%</small></span></td>
                           <td><span style="color: white;">&#8377;`+ overall_p_p_l.toFixed(2) +`<br><small>`+ (overall_p_p_l_per).toFixed(2) +`%</small></span></td>
                           <td><span style="color: white;">&#8377;`+ total_realised_gain.toFixed(2) +`</span></td>
                           <td><span style="color: white;">`+ parseFloat(total_dividend_amount).toFixed(2) +`</span></td>
                           <td><span style="color: white;">&#8377;`+ parseFloat(overall_p_p_l + total_realised_gain + total_dividend_amount).toFixed(2) +`</span></td>
                           <td><span style="color: white;">&#8377;<span id='currentVal_stocks_Overview'>`+ currentVal.toFixed(2) +`</span></span></td>
                           <td><span style="color: white;"><a href="<?php echo Wo_SeoLink('index.php?link1=go-pro');?>" style="color: white;">Pro</a></span></td>
                       </tr>`;

            $('#overview_stocks_table_body').append(last_tr);
            add_weightage_Overview(fincode_stock_weightage_current, fincode_sector_weightage_current, fincode_stock_weightage_invested, fincode_sector_weightage_invested, fincode_sector_weightage_profit, fincode_sector_weightage_profit_per);
        }

        return currentVal.toFixed(2);
    }

    function averageBuyingPrice({n, total}, stock_portfolio_data) {
        if (stock_portfolio_data.stock_transaction_qty < 0) {
            return {n, total};
        }
        return {
            n:   n + parseFloat(stock_portfolio_data.stock_transaction_qty),
            total: total + (parseFloat(stock_portfolio_data.stock_transaction_price) * parseFloat(stock_portfolio_data.stock_transaction_qty)) + parseFloat(stock_portfolio_data.Charges),
        };
    }

    function change_dynamic_colors(){
        if (parseFloat($('#overall_p_p_l_per').text()) > 0){
            /* $('#p_l_added_this_year_unrealised_div').removeClass('SA_border-left-secondary'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#overall_p_p_l_div').addClass('SA_border-left-success');
            $('#overall_p_p_l_text').addClass('SA_text-success');
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-success'); */
        } else if (parseFloat($('#overall_p_p_l_per').text()) < 0){
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#overall_p_p_l_div').addClass('SA_border-left-danger');
            $('#overall_p_p_l_text').addClass('SA_text-danger');
            /* $('#p_l_this_year').addClass('SA_text-danger'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-danger'); */
        }

        if (parseFloat($('#daily_p_p_l_per').text()) > 0){
            /* $('#p_l_added_this_year_unrealised_div').removeClass('SA_border-left-secondary'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#daily_p_p_l_div').addClass('SA_border-left-success');
            $('#daily_p_p_l_text').addClass('SA_text-success');
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-success'); */
        } else if (parseFloat($('#daily_p_p_l_per').text()) < 0){
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#daily_p_p_l_div').addClass('SA_border-left-danger');
            $('#daily_p_p_l_text').addClass('SA_text-danger');
            /* $('#p_l_this_year').addClass('SA_text-danger'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-danger'); */
        }

        if (parseFloat($('#p_l_this_year').text()) > 0){
            /* $('#p_l_added_this_year_unrealised_div').removeClass('SA_border-left-secondary'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#p_l_added_this_year_unrealised_div').addClass('SA_border-left-success');
            $('#p_l_added_this_year_unrealised_text').addClass('SA_text-success');
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-success'); */
        } else if (parseFloat($('#p_l_this_year').text()) < 0){
            /* $('#p_l_added_this_year_unrealised_text_ruppee').removeClass('SA_text-gray-800'); */
            $('#p_l_added_this_year_unrealised_div').addClass('SA_border-left-danger');
            $('#p_l_added_this_year_unrealised_text').addClass('SA_text-danger');
            /* $('#p_l_this_year').addClass('SA_text-danger'); */
            /* $('#p_l_added_this_year_unrealised_text_ruppee').addClass('SA_text-danger'); */
        }
    }

    function change_colors(tag, p_l_per){
       $('#'+ tag +'_per').text(p_l_per.toFixed(2));
       if (p_l_per > 0){
           $('#'+ tag +'_div').removeClass('SA_border-left-danger');
           $('#'+ tag +'_div').removeClass('SA_border-left-secondary');
           $('#'+ tag +'_text').removeClass('SA_text-danger');
           $('#'+ tag +'_text').removeClass('SA_text-secondary');

           $('#'+ tag +'_text').addClass('SA_text-success');
           $('#'+ tag +'_div').addClass('SA_border-left-success');
       } else if(p_l_per == 0) {
           $('#'+ tag +'_div').removeClass('SA_border-left-success');
           $('#'+ tag +'_div').removeClass('SA_border-left-danger');
           $('#'+ tag +'_text').removeClass('SA_text-danger');
           $('#'+ tag +'_text').removeClass('SA_text-success');

           $('#'+ tag +'_text').addClass('SA_text-secondary');
           $('#'+ tag +'_div').addClass('SA_border-left-secondary');
           $('#'+ tag +'_progress').addClass('SA_bg-secondary');
       } else {
           $('#'+ tag +'_div').removeClass('SA_border-left-success');
           $('#'+ tag +'_div').removeClass('SA_border-left-secondary');
           $('#'+ tag +'_text').removeClass('SA_text-success');
           $('#'+ tag +'_text').removeClass('SA_text-secondary');

           $('#'+ tag +'_text').addClass('SA_text-danger');
           $('#'+ tag +'_div').addClass('SA_border-left-danger');
       }
    }


    function change_upper_values(data){

       const initialVals       = {n: 0, total: 0};
       const stock_portfolio_data_average_length = data.stock_portfolio_data.reduce(averageBuyingPrice, initialVals);
       console.log(stock_portfolio_data_average_length);

       const volume_in_portfolio = stock_portfolio_data_average_length.n;
       $('#volume_in_portfolio').text(volume_in_portfolio);

       const total_buying_price = stock_portfolio_data_average_length.total;
       $('#total_buying_price').text(total_buying_price);

       const average_buying_price = total_buying_price/volume_in_portfolio;
       $('#average_buying_price').text(average_buying_price);

       if (data.price_detail_intraday != null){

           $('#current_stock_value').text(data.price_detail_intraday.close);

           const daily_p_l = (data.price_detail_intraday.close - data.extra_stock_data.price_detail_adjusted.close) * volume_in_portfolio;
           $('#daily_p_l').text(daily_p_l);

           const daily_p_l_per = ((data.price_detail_intraday.close - data.extra_stock_data.price_detail_adjusted.close) / data.extra_stock_data.price_detail_adjusted.close) * 100;
           change_colors('daily_p_l', daily_p_l_per);

           const overall_p_l = (data.price_detail_intraday.close * volume_in_portfolio) - total_buying_price;
           $('#overall_p_l').text(overall_p_l);

           const overall_p_l_per = (overall_p_l / (data.price_detail_intraday.close * volume_in_portfolio)) * 100;
           change_colors('overall_p_l', overall_p_l_per);

       } else{

           $('#current_stock_value').text(data.price_detail_adjusted.close);

           const daily_p_l = 0;
           $('#daily_p_l').text(daily_p_l);

           const daily_p_l_per = 0;

           change_colors('daily_p_l', daily_p_l_per);

           const overall_p_l = (data.price_detail_adjusted.close * volume_in_portfolio) - total_buying_price;
           $('#overall_p_l').text(overall_p_l);

           const overall_p_l_per = (overall_p_l / (data.price_detail_adjusted.close * volume_in_portfolio)) * 100;

           change_colors('overall_p_l', overall_p_l_per);

       }
    }

    function transaction_price_graph(date_seperation, date_compname_type){
        var tmp_proper_date = '';
        var tmp_date = 0;
        var tmp_price = 0;

        $.ajax({
            url: Wo_Ajax_Requests_File(),
            type: 'GET',
            dataType: 'json',
            data: {
                f:'other_stock_transactions',
                portfolio_id: <?php echo $wo['portfolio_data']['portfolio_id']; ?>,
            },
            success: function(data) {
                if (data['status'] == 200){
                    console.log(data);

                    for (compname in data.other_stock_transactions){
                        console.log(compname);
                        console.log(data.other_stock_transactions[compname]);
                        data.other_stock_transactions[compname].forEach( function (val){
                            tmp_date = new Date(parseInt(val.stock_transaction_date) * 1000);
                            tmp_proper_date =  (tmp_date.getMonth() + 1) +"-"+ tmp_date.getDate() +"-"+ tmp_date.getFullYear()
                            tmp_price = (parseFloat(val.stock_transaction_price) * parseInt(val.stock_transaction_qty)) + parseFloat(val.Charges);
                            if (tmp_proper_date in date_seperation) date_seperation[tmp_proper_date] += tmp_price;
                            else date_seperation[tmp_proper_date] = tmp_price;
                            if (tmp_proper_date in date_compname_type){
                                if (compname in date_compname_type[tmp_proper_date]) date_compname_type[tmp_proper_date][compname].push([val.SOLD, tmp_price, parseInt(val.stock_transaction_qty)]);
                                else date_compname_type[tmp_proper_date][compname] = [[val.SOLD, tmp_price, parseInt(val.stock_transaction_qty)]];
                            } else{
                                date_compname_type[tmp_proper_date] = Object();
                                date_compname_type[tmp_proper_date][compname] = [[val.SOLD, tmp_price, parseInt(val.stock_transaction_qty)]];
                            }
                        })
                    }
                    add_Overview_stock_transactionChart(date_seperation, date_compname_type);
                }
                else if (data['status'] == 401){
                    console.log(data);
                    Swal.fire({
                        icon: 'error',
                        title: data['error'],
                    })
                }
                else{
                    console.log(data);
                    Swal.fire({
                        icon: 'error',
                        title: data['error'],
                    })
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                alert("AJAX call failed: " + textStatus + ", " + errorThrown);
            }
        });

    }
    async function realized_gain_dividend_show(){
        $.ajax({
            url: Wo_Ajax_Requests_File(),
            type: 'GET',
            dataType: 'json',
            data: {
                f:'get_realized_dividend',
                portfolio_id: <?php echo $wo['portfolio_data']['portfolio_id']; ?>,
            },
            success: function(data) {
                if (data['status'] == 200){
                    console.log(data);
                    $('#total_realised_gain').text((parseFloat(data.realized_gains)) ? parseFloat(data.realized_gains).toFixed(2) : 0);
                    if (parseFloat(data.realized_gains) > 0) $('#total_realised_gain_div').addClass('SA_text-success');
                    else if (parseFloat(data.realized_gains) < 0) $('#total_realised_gain_div').addClass('SA_text-danger');
                    $('#total_dividend_amount').text((parseFloat(data.dividend_amount)) ? parseFloat(data.dividend_amount).toFixed(2) : 0);
                }
                else if (data['status'] == 401){
                    console.log(data);
                    Swal.fire({
                        icon: 'error',
                        title: data['error'],
                    })
                }
                else{
                    console.log(data);
                    Swal.fire({
                        icon: 'error',
                        title: data['error'],
                    })
                }
            },
            error: function(jqXHR, textStatus, errorThrown) {
                alert("AJAX call failed: " + textStatus + ", " + errorThrown);
            }
        });
    }
</script>
<?php echo Wo_LoadPage('addStocksPortfolio/add_stock_popup'); ?>
